/**
 * This file was automatically generated by jetbrick-schema-app.
 * Please DO NOT modify this file.
 */
package ${schema.packageName}.data;

import jetbrick.dao.orm.jdbc.RowMapper;
import jetbrick.dao.schema.data.*;
import jetbrick.dao.schema.data.jdbc.*;
import com.alibaba.fastjson.JSONObject;

// TABLE: ${table.displayName}(${table.tableName})
// checksum: ${table.checksum}
// timestamp: ${now()}

@SuppressWarnings({"serial", "unchecked"})
public class ${table.tableClass} extends Entity {

    //------ field list ---------------------------------------
#for(TableColumn c : table.unpkColumns)
    protected ${c.fullClassName()} ${c.fieldName};  // ${c.displayName}(${c.columnName})
#end

    //------ schema -------------------------------------------
    public static final SchemaInfo<${table.tableClass}> SCHEMA;
#for(TableColumn c : table.columns)
    public static final SchemaColumn SC_${c.columnName.toUpperCase};
#end

    @Override
    public SchemaInfo<${table.tableClass}> schema() {
        return SCHEMA;
    }

    static {
        SchemaInfoImpl<${table.tableClass}> schema = new SchemaInfoImpl<${table.tableClass}>();
        SCHEMA = schema;
        
        schema.setTableName("${table.tableName}");
        schema.setTableClass(${table.tableClass}.class);
        schema.setCacheSupport(${table.cacheSupport});
        schema.setCacheMaxSize(${table.cacheMaxSize});
        schema.setCacheMaxLiveSeconds(${table.cacheMaxLiveSeconds});
        schema.setCacheMaxIdleSeconds(${table.cacheMaxIdleSeconds});
        schema.setDisplayName(${toJSON(table.displayName)});
        schema.setDescription(${toJSON(table.description)});
        schema.setChecksum("${table.checksum}");
        schema.setTimestamp("${now()}");

        // column list
#for(TableColumn c : table.columns)
        SC_${c.columnName.toUpperCase} = schema.addColumn("${c.fieldName}", ${c.fullClassName()}.class, "${c.columnName}", "${c.typeName}", ${toJSON(c.typeLength)}, ${toJSON(c.typeScale)}, ${c.nullable}, ${toJSON(c.defaultValue)}, ${toJSON(c.displayName)}, ${toJSON(c.description)}, ${c.primaryKey}, null, ${c.json});
#end

        // column validator
        schema.addDefaultValidators();
    }

    //------- id ----------------------------------------------
#if(table.pkIsNumeric())
    private static final jetbrick.dao.id.SequenceId SEQ = EntityUtils.createSequenceId(${table.tableName});
    
    @Override
    public ${table.pk().simpleClassName()} generateId() {
        if (id == null) {
            id = SEQ.nextVal();
        }
        return (${table.pk().simpleClassName()}) id;
    }
#else
    @Override
    public ${table.pk().simpleClassName()} generateId() {
        if (id == null) {
            id = com.humpic.framework.commons.lang.IdentityUtils.uuid16();
        }
        return (${table.pk().simpleClassName()}) id;
    }
#end

    @Override
    public ${table.pk().simpleClassName()} getId() {
        return (${table.pk().simpleClassName()}) id;
    }

    public void setId(${table.pk().simpleClassName()} id) {
        this.id = id;
    }
    
    //------ getter / setter ----------------------------------
#for(TableColumn c : table.unpkColumns)
    public ${c.fullClassName()} ${c.getter}() {
        return ${c.fieldName};
    }

    public void ${c.setter}(${c.fullClassName()} ${c.fieldName}) {
        this.${c.fieldName} = ${c.fieldName};
    }

#end
    //------ one-to-many --------------------------------------
#for(OneToManyRelation rel in table.importedRelations)
    private ${rel.reference.tableClass} rel_${rel.name};
#end
#for(OneToManyRelation rel in table.exportedRelations)
    private java.util.List<${rel.column.table.tableClass}> rel_${rel.name};
#end

#for(OneToManyRelation rel in table.importedRelations)
    public ${rel.reference.tableClass} ${rel.name}() {
        if (${rel.column.fieldName} == null) return null;
        if (rel_${rel.name} == null) {
            synchronized (this) {
                if (rel_${rel.name} == null) {
                    rel_${rel.name} = ${rel.reference.tableClass}.DAO.load(${rel.column.fieldName});
                }
            }
        }
        return rel_${rel.name};
    }

#end
#for(OneToManyRelation rel in table.exportedRelations)
    public java.util.List<${rel.column.table.tableClass}> ${rel.name}() {
        if (id == null) return java.util.Collections.emptyList();
        if (rel_${rel.name} == null) {
            synchronized (this) {
                if (rel_${rel.name} == null) {
                    rel_${rel.name} = ${rel.column.table.tableClass}.DAO.loadSomeEx("${rel.column.fieldName}", id);
                }
            }
        }
        return rel_${rel.name};
    }
 
#end
    //------ cache --------------------------------------------
#if(table.cacheSupport)
    public static final EntityCache<${table.tableClass}> CACHE = new EntityCache<${table.tableClass}>(${table.tableClass}.class.getName(), ${table.cacheMaxSize}, true, ${table.cacheMaxLiveSeconds}, ${table.cacheMaxIdleSeconds});
#else
    public static final EntityCache<${table.tableClass}> CACHE = EntityCache.NO_CACHE;
#end

    @Override
    public EntityCache<${table.tableClass}> cache() {
        return CACHE;
    }

    //------ dao -----------------------------------
    public static final RowMapper<${table.tableClass}> ROW_MAPPER = new RowMapper<${table.tableClass}>() {
        public ${table.tableClass} handle(java.sql.ResultSet rs) throws java.sql.SQLException {
            ${table.tableClass} info = new ${table.tableClass}();
    #for(TableColumn c : table.columns)
            info.${c.fieldName} = rs.${c.rsGetter()}("${c.fieldName}");
    #end
            return info;
        }
    };

#if(table.cacheSupport)
    public static final EntityDaoHelper<${table.tableClass}> DAO = new CachedJdbcEntityDaoHelper(JdbcEntity.DAO, ${table.tableClass}.class, SCHEMA, ROW_MAPPER, CACHE);
#else
    public static final EntityDaoHelper<${table.tableClass}> DAO = new JdbcEntityDaoHelper(JdbcEntity.DAO, ${table.tableClass}.class, SCHEMA, ROW_MAPPER);
#end
    
    @Override
    public EntityDaoHelper<${table.tableClass}> dao() {
        return DAO;
    }
    
    @Override
    public Object[] dao_insert_parameters() {
        return new Object[] { ${table.fieldlist(true)} };
    }

    @Override
    public Object[] dao_update_parameters() {
        return new Object[] { ${table.fieldlist(false)} };
    }

    //------ validate -----------------------------------------
    @Override
    public void validate() {
#for(TableColumn c : table.unpkColumns)
        validate(SC_${c.columnName.toUpperCase}, ${c.fieldName});
#end
    }

    //------ hashcode / equals --------------------------------
    @Override
    public int hashCode() {
        int _ret = 17;
#for(TableColumn c : table.columns)
        if (${c.fieldName} != null) _ret = 31 * _ret + ${c.fieldName}.hashCode();
#end
        return _ret;
    }

    @Override
    public boolean equals(Object _obj) {
        if (_obj == null) return false;
        if (_obj == this) return true;
        if (_obj.getClass() != getClass()) return false;

        ${table.tableClass} _o = (${table.tableClass}) _obj;
        //@formatter:off
        return new org.apache.commons.lang3.builder.EqualsBuilder()
#for(TableColumn c : table.columns)
            .append(${c.fieldName}, _o.${c.fieldName}) 
#end
            .isEquals();
        //@formatter:on
    }

    //------ instance -----------------------------------------
    public static ${table.tableClass} newInstance() {
        ${table.tableClass} data = new ${table.tableClass}();
        data.makeDefaults();
        return data;
    }

    @Override
    public void makeDefaults() {
#for(TableColumn c : table.columns)
    #if(c.defaultValue)
        this.${c.fieldName} = ${c.fieldDefaultValue()};
    #end
#end
    }

    //------ clone --------------------------------------------
    @Override
    public ${table.tableClass} clone() {
        return cloneFields(this, new ${table.tableClass}());
    }

    public void copy(${table.tableClass} from) {
        cloneFields(from, this);
    }

    private ${table.tableClass} cloneFields(${table.tableClass} _from, ${table.tableClass} _to) {
#for(TableColumn c : table.columns)
        _to.${c.fieldName} = _from.${c.fieldName};
#end
        return _to;
    }

    //------ json ---------------------------------------------
    @Override
    public JSONObject toJSONObject() {
        JSONObject _json = new JSONObject();
#for(TableColumn c : table.columns)
    #if(c.json)
        _json.put("${c.fieldName}", ${c.fieldName});
    #end
#end
        return _json;
    }

    //------ end ----------------------------------------------
}

