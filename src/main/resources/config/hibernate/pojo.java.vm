/**
 * Generated by humpic-schema-tools.
 * $Id: $
 */
package ${schema.packageName}.data;

import jetbrick.commons.db.data.*;
import com.alibaba.fastjson.*;

#if($table.extension)
import ${schema.packageName}.data.extension.*;
#end

// TABLE: ${table.displayName}(${table.name})
// checksum: ${table.checksum}

@SuppressWarnings("serial")
public class ${table.className} extends AbstractData {

############## SchemaInfo Begin ###############
	public static final SchemaInfo schema = new SchemaInfo(${table.className}.class);
	protected final ${table.fn.extensionClassName} extension = ${table.fn.extensionClassDefination};

############## CompositeId Begin ###############
#if($table.fn.hasCompositeId())	
	protected ${table.className}CompositeId id = new ${table.className}CompositeId();

	public ${table.className}CompositeId getId() {
		return this.id;
	}
	
	public void setId(${table.className}CompositeId id) {
		this.id = id;
	}

#end
############## Table Columns #########################
#foreach($c in $table.fn.uncompositedColumns)
	${c.fn.javaFieldDefination};    // ${c.displayName}(${c.name})
#end

#foreach($k in $table.importedKeys)
	protected ${k.referenceTable.className} ${k.importVariableName};	// $k.columnlist() -> $k.referenceTable.name
#end
#foreach($k in $table.exportedKeys)
	protected ${k.exportJavaClass} ${k.exportVariableName} = new ${k.exportImplementJavaClass};	// ${k.table.name}.${k.columnlist()}
#end

	public static ${table.className} newInstance() {
		${table.className} info = new ${table.className}();
		info.setDefaults();
		return info;
	}
	
	@Override
	public SchemaInfo getSchema() {
		return schema;
	}
	
	public ${table.fn.extensionClassName} getExtension() {
		return extension;
	}

	@Override
	public void verify() {
		super.verify();
		extension.verify();
	}
	
	@Override
	public void setDefaults() {
#foreach($c in $table.fn.columnsWithDefaultValue)
		${c.fn.javaFieldDefaultValue};
#end
		extension.setDefaults();
	}
	
#foreach($c in $table.fn.uncompositedColumns)
	public ${c.className} ${c.getterName}() {
		return this.${c.variableName};
	}

	public void ${c.setterName}(${c.className} ${c.variableName}) {
		this.${c.variableName} = ${c.variableName};
	}

#end
########## ImportedKeys and ExportedKeys #############
#foreach($k in $table.importedKeys)
	public ${k.referenceTable.className} ${k.importVariableNameGetter}() {
		return this.${k.importVariableName};
	}

	public void ${k.importVariableNameSetter}(${k.referenceTable.className} ${k.importVariableName}) {
		this.${k.importVariableName} = ${k.importVariableName};
	}

#end
#foreach($k in $table.exportedKeys)
	public ${k.exportJavaClass} ${k.exportVariableNameGetter}() {
		return this.${k.exportVariableName};
	}

	public void ${k.exportVariableNameSetter}(${k.exportJavaClass} ${k.exportVariableName}) {
		this.${k.exportVariableName} = ${k.exportVariableName};
	}

#end

########## CopyFrom #########################################
    public void copyFrom(${table.className} copy) {
#foreach($c in $table.fn.unpkColumns)
        ${c.variableName} = copy.${c.variableName};
#end
    }

########## Clone #########################################
	@Override
	public ${table.className} clone() {
		${table.className} copy = new ${table.className}();
#if($table.fn.hasCompositeId())
####	copy.id = id.clone();
        copy.setId(id.clone());
#end
#foreach($c in $table.fn.uncompositedColumns)
####	copy.${c.variableName} = ${c.variableName};
        copy.${c.setterName}(${c.variableName});
#end
#foreach($k in $table.importedKeys)
        if (${k.importVariableName} != null) {
            copy.${k.importVariableName} = ${k.importVariableName}.clone();
        }
#end
#foreach($k in $table.exportedKeys)
		copy.${k.exportVariableName}.addAll(${k.exportVariableName});
#end
		return copy;
	}

########## JSON #########################################
	@Override
	public JSONObject toJSONObject() {
		JSONObject json = new JSONObject();
#if($table.fn.hasCompositeId())
#foreach($c in $table.primaryKey.columns)
		json.put("${c.variableName}", id.${c.getterName}());
#end
#end
#foreach($c in $table.fn.jsonColumns)
		json.put("${c.variableName}", ${c.variableName});
#end
		extension.filter(json);
		return json;
	}

}
