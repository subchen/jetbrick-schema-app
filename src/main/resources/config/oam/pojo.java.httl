/**
 * This file was automatically generated by jetbrick-schema-app.
 * Please DO NOT modify this file.
 */
package ${schema.packageName}.dao.data;

import jetbrick.dao.id.SequenceId;
import jetbrick.dao.schema.data.*;
import jetbrick.dao.utils.DbUtils;
import com.alibaba.fastjson.JSONObject;

// TABLE: ${table.displayName}(${table.tableName})
// checksum: ${table.checksum}
// timestamp: ${now()}

@SuppressWarnings("serial")
public class ${table.tableClass} extends PersistentData {

    //------ field list ---------------------------------------
#for(TableColumn c : table.unpkColumns)
    protected ${c.fullFieldClass} ${c.fieldName};  // ${c.displayName}(${c.columnName})
#end

    //------ schema -------------------------------------------
    public static final SchemaInfo<${table.tableClass}> SCHEMA;
#for(TableColumn c : table.columns)
    public static final SchemaColumn SC_${c.columnName.toUpperCase};
#end

    @Override
    public SchemaInfo<${table.tableClass}> getSchema() {
        return SCHEMA;
    }

    static {
        SchemaInfoImpl<${table.tableClass}> schema = new SchemaInfoImpl<${table.tableClass}>();
        SCHEMA = schema;
        
        schema.setTableName("${table.tableName}");
        schema.setTableClass(${table.tableClass}.class);
        schema.setCacheSupport(${table.cacheSupport});
        schema.setCacheMaxSize(${table.cacheMaxSize});
        schema.setCacheMaxLiveSeconds(${table.cacheMaxLiveSeconds});
        schema.setCacheMaxIdleSeconds(${table.cacheMaxIdleSeconds});
        schema.setDisplayName(${toJSON(table.displayName)});
        schema.setDescription(${toJSON(table.description)});
        schema.setChecksum("${table.checksum}");
        schema.setTimestamp("${now()}");

        // column list
#for(TableColumn c : table.columns)
        SC_${c.columnName.toUpperCase} = schema.addColumn("${c.fieldName}", ${c.fullFieldClass}.class, "${c.columnName}", "${c.typeName}", ${toJSON(c.typeLength)}, ${toJSON(c.typeScale)}, ${c.nullable}, ${toJSON(c.defaultValue)}, ${toJSON(c.displayName)}, ${toJSON(c.description)}, ${c.primaryKey}, null, ${c.json});
#end

        // column validator
        schema.addDefaultValidators();
    }

    //------- id ----------------------------------------------
    private static final SequenceId sequence_id = DbUtils.dao().createSequenceId(SCHEMA);

    @Override
    public Long generateId() {
        if (id == null) {
            id = sequence_id.nextVal();
        }
        return id;
    }
    
    //------ getter / setter ----------------------------------
#for(TableColumn c : table.unpkColumns)
    public ${c.fullFieldClass} ${c.getter}() {
        return ${c.fieldName};
    }

    public void ${c.setter}(${c.fullFieldClass} ${c.fieldName}) {
        this.${c.fieldName} = ${c.fieldName};
    }

#end
    //------ one-to-many --------------------------------------
#for(OneToManyRelation rel in table.importedRelations)
    private ${rel.reference.tableClass} rel_${rel.name};
#end
#for(OneToManyRelation rel in table.exportedRelations)
    private java.util.List<${rel.column.table.tableClass}> rel_${rel.name};
#end

#for(OneToManyRelation rel in table.importedRelations)
    public ${rel.reference.tableClass} ${rel.name}() {
        if (${rel.column.fieldName} == null) return null;
        if (rel_${rel.name} == null) {
            synchronized (this) {
                if (rel_${rel.name} == null) {
                    rel_${rel.name} = DbUtils.dao().get(${rel.reference.tableClass}.class, ${rel.column.fieldName});
                }
            }
        }
        return rel_${rel.name};
    }

#end
#for(OneToManyRelation rel in table.exportedRelations)
    public java.util.List<${rel.column.table.tableClass}> ${rel.name}() {
        if (id == null) return java.util.Collections.emptyList();
        if (rel_${rel.name} == null) {
            synchronized (this) {
                if (rel_${rel.name} == null) {
                    rel_${rel.name} = DbUtils.dao().getSome(${rel.column.table.tableClass}.class, "${rel.column.columnName}", id);
                }
            }
        }
        return rel_${rel.name};
    }
 
#end
    //------ dao parameters -----------------------------------
    @Override
    public Object[] dao_insert_parameters() {
        return new Object[] { ${table.fieldlist(true)} };
    }

    @Override
    public Object[] dao_update_parameters() {
        return new Object[] { ${table.fieldlist(false)} };
    }

    //------ validate -----------------------------------------
    @Override
    public void validate() {
#for(TableColumn c : table.unpkColumns)
        validate(SC_${c.columnName.toUpperCase}, ${c.fieldName});
#end
    }

    //------ hashcode / equals --------------------------------
    @Override
    public int hashCode() {
        int result = 17;
#for(TableColumn c : table.columns)
        if (${c.fieldName} != null) result = 31 * result + ${c.fieldName}.hashCode();
#end
        return result;
    }

    @Override
    public boolean equals(Object object) {
        if (this == object) return true;
        if (null == object) return false;
        if (!(object instanceof ${table.tableClass})) return false;

        ${table.tableClass} o = (${table.tableClass}) object;
#for(TableColumn c : table.columns)
        if ((${c.fieldName} != o.${c.fieldName}) && !${c.fieldName}.equals(o.${c.fieldName})) return false;
#end
        return true;
    }

    //------ cache --------------------------------------------
#if(table.cacheSupport)
    public static final PersistentCache CACHE = new PersistentCache<${table.tableClass}>(${table.tableClass}.class.getName(), ${table.cacheMaxSize}, true, ${table.cacheMaxLiveSeconds}, ${table.cacheMaxIdleSeconds});
#else
    @SuppressWarnings("unchecked")
    public static final PersistentCache CACHE = PersistentCache.NO_CACHE;
#end

    @Override
    public PersistentCache<${table.tableClass}> getCache() {
        return CACHE;
    }

    //------ instance -----------------------------------------
    public static ${table.tableClass} newInstance() {
        ${table.tableClass} data = new ${table.tableClass}();
        data.makeDefaults();
        return data;
    }

    @Override
    public void makeDefaults() {
#for(TableColumn c : table.columns)
    #if(c.defaultValue)
        this.${c.fieldName} = ${toJSON(c.defaultValue)};
    #end
#end
    }

    //------ clone --------------------------------------------
    @Override
    public ${table.tableClass} clone() {
        return cloneFields(this, new ${table.tableClass}());
    }

    public void copy(${table.tableClass} from) {
        cloneFields(from, this);
    }

    private ${table.tableClass} cloneFields(${table.tableClass} from, ${table.tableClass} to) {
#for(TableColumn c : table.columns)
        to.${c.fieldName} = from.${c.fieldName};
#end
        return to;
    }

    //------ json ---------------------------------------------
    @Override
    public JSONObject toJSONObject() {
        JSONObject json = new JSONObject();
#for(TableColumn c : table.columns)
    #if(c.json)
        json.put("${c.fieldName}", ${c.fieldName});
    #end
#end
        return json;
    }

    //------ end ----------------------------------------------
}

